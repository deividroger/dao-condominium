/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CondominiumAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addResident"
      | "addTopic"
      | "closeVoting"
      | "editTopic"
      | "getImplAddress"
      | "getManager"
      | "getQuota"
      | "openVoting"
      | "owner"
      | "payQuota"
      | "removeResident"
      | "removeTopic"
      | "setCounselor"
      | "transfer"
      | "upgrade"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ManagerChanged"
      | "QuotaChanged"
      | "TopicChanged"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addResident",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTopic",
    values: [string, string, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "closeVoting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "editTopic",
    values: [string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getQuota", values?: undefined): string;
  encodeFunctionData(functionFragment: "openVoting", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payQuota",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeResident",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "removeTopic", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCounselor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addResident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTopic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editTopic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImplAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getQuota", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openVoting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payQuota", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeResident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCounselor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ManagerChangedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuotaChangedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopicChangedEvent {
  export type InputTuple = [
    topicId: BytesLike,
    title: string,
    status: BigNumberish
  ];
  export type OutputTuple = [topicId: string, title: string, status: bigint];
  export interface OutputObject {
    topicId: string;
    title: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    topic: string
  ];
  export type OutputTuple = [to: string, amount: bigint, topic: string];
  export interface OutputObject {
    to: string;
    amount: bigint;
    topic: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CondominiumAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): CondominiumAdapter;
  waitForDeployment(): Promise<this>;

  interface: CondominiumAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addResident: TypedContractMethod<
    [resident: AddressLike, residenceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addTopic: TypedContractMethod<
    [
      title: string,
      description: string,
      category: BigNumberish,
      amount: BigNumberish,
      responsible: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  closeVoting: TypedContractMethod<[title: string], [void], "nonpayable">;

  editTopic: TypedContractMethod<
    [
      topicToEdit: string,
      description: string,
      amount: BigNumberish,
      responsible: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getImplAddress: TypedContractMethod<[], [string], "view">;

  getManager: TypedContractMethod<[], [string], "view">;

  getQuota: TypedContractMethod<[], [bigint], "view">;

  openVoting: TypedContractMethod<[title: string], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  payQuota: TypedContractMethod<[residenseId: BigNumberish], [void], "payable">;

  removeResident: TypedContractMethod<
    [resident: AddressLike],
    [void],
    "nonpayable"
  >;

  removeTopic: TypedContractMethod<[title: string], [void], "nonpayable">;

  setCounselor: TypedContractMethod<
    [resident: AddressLike, isEntering: boolean],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [topicTitle: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [title: string, option: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addResident"
  ): TypedContractMethod<
    [resident: AddressLike, residenceId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTopic"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      category: BigNumberish,
      amount: BigNumberish,
      responsible: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeVoting"
  ): TypedContractMethod<[title: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "editTopic"
  ): TypedContractMethod<
    [
      topicToEdit: string,
      description: string,
      amount: BigNumberish,
      responsible: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getImplAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getQuota"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openVoting"
  ): TypedContractMethod<[title: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payQuota"
  ): TypedContractMethod<[residenseId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "removeResident"
  ): TypedContractMethod<[resident: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeTopic"
  ): TypedContractMethod<[title: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCounselor"
  ): TypedContractMethod<
    [resident: AddressLike, isEntering: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [topicTitle: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [title: string, option: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ManagerChanged"
  ): TypedContractEvent<
    ManagerChangedEvent.InputTuple,
    ManagerChangedEvent.OutputTuple,
    ManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "QuotaChanged"
  ): TypedContractEvent<
    QuotaChangedEvent.InputTuple,
    QuotaChangedEvent.OutputTuple,
    QuotaChangedEvent.OutputObject
  >;
  getEvent(
    key: "TopicChanged"
  ): TypedContractEvent<
    TopicChangedEvent.InputTuple,
    TopicChangedEvent.OutputTuple,
    TopicChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "ManagerChanged(address)": TypedContractEvent<
      ManagerChangedEvent.InputTuple,
      ManagerChangedEvent.OutputTuple,
      ManagerChangedEvent.OutputObject
    >;
    ManagerChanged: TypedContractEvent<
      ManagerChangedEvent.InputTuple,
      ManagerChangedEvent.OutputTuple,
      ManagerChangedEvent.OutputObject
    >;

    "QuotaChanged(uint256)": TypedContractEvent<
      QuotaChangedEvent.InputTuple,
      QuotaChangedEvent.OutputTuple,
      QuotaChangedEvent.OutputObject
    >;
    QuotaChanged: TypedContractEvent<
      QuotaChangedEvent.InputTuple,
      QuotaChangedEvent.OutputTuple,
      QuotaChangedEvent.OutputObject
    >;

    "TopicChanged(bytes32,string,uint8)": TypedContractEvent<
      TopicChangedEvent.InputTuple,
      TopicChangedEvent.OutputTuple,
      TopicChangedEvent.OutputObject
    >;
    TopicChanged: TypedContractEvent<
      TopicChangedEvent.InputTuple,
      TopicChangedEvent.OutputTuple,
      TopicChangedEvent.OutputObject
    >;

    "Transfer(address,uint256,string)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
