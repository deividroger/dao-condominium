/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  CondominiumAdapter,
  CondominiumAdapterInterface,
} from "../CondominiumAdapter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "residenceId",
        type: "uint16",
      },
    ],
    name: "addResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "enum CondominiumLib.Category",
        name: "category",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "responsible",
        type: "address",
      },
    ],
    name: "addTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "closeVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "topicToEdit",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "responsible",
        type: "address",
      },
    ],
    name: "editTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "openVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
    ],
    name: "removeResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "removeTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isEntering",
        type: "bool",
      },
    ],
    name: "setCounselor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "enum CondominiumLib.Options",
        name: "option",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052348015600f57600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506080516116976100666000396000818161020f015261066c01526116976000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638fc5dad8116100715780638fc5dad81461016557806390ca27f31461018157806396fa1def1461019d5780639e1bf985146101b9578063b1583546146101d5578063eaf5d9dc146101f1576100b4565b80630900f010146100b957806343b8c6b1146100d5578063597de987146100f15780637311ad811461010d5780637b57ee491461012b5780638da5cb5b14610147575b600080fd5b6100d360048036038101906100ce9190610dc0565b61020d565b005b6100ef60048036038101906100ea9190610f8e565b6102de565b005b61010b60048036038101906101069190610dc0565b610407565b005b610115610524565b6040516101229190611050565b60405180910390f35b6101456004803603810190610140919061106b565b61054d565b005b61014f61066a565b60405161015c9190611050565b60405180910390f35b61017f600480360381019061017a919061106b565b61068e565b005b61019b600480360381019061019691906110d9565b6107ab565b005b6101b760048036038101906101b2919061116d565b6108cb565b005b6101d360048036038101906101ce919061106b565b6109eb565b005b6101ef60048036038101906101ea91906111e7565b610b08565b005b61020b60048036038101906102069190611227565b610c28565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029290611323565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361036d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103649061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343b8c6b186868686866040518663ffffffff1660e01b81526004016103ce9594939291906114a3565b600060405180830381600087803b1580156103e857600080fd5b505af11580156103fc573d6000803e3d6000fd5b505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048d9061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663597de987826040518263ffffffff1660e01b81526004016104ef9190611050565b600060405180830381600087803b15801561050957600080fd5b505af115801561051d573d6000803e3d6000fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d39061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b57ee49826040518263ffffffff1660e01b81526004016106359190611504565b600060405180830381600087803b15801561064f57600080fd5b505af1158015610663573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361071d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107149061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fc5dad8826040518263ffffffff1660e01b81526004016107769190611504565b600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361083a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108319061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390ca27f383836040518363ffffffff1660e01b815260040161089592919061156e565b600060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361095a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109519061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396fa1def83836040518363ffffffff1660e01b81526004016109b59291906115ad565b600060405180830381600087803b1580156109cf57600080fd5b505af11580156109e3573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a719061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e1bf985826040518263ffffffff1660e01b8152600401610ad39190611504565b600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e9061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b158354683836040518363ffffffff1660e01b8152600401610bf29291906115e5565b600060405180830381600087803b158015610c0c57600080fd5b505af1158015610c20573d6000803e3d6000fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae9061138f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eaf5d9dc858585856040518563ffffffff1660e01b8152600401610d16949392919061160e565b600060405180830381600087803b158015610d3057600080fd5b505af1158015610d44573d6000803e3d6000fd5b5050505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d8d82610d62565b9050919050565b610d9d81610d82565b8114610da857600080fd5b50565b600081359050610dba81610d94565b92915050565b600060208284031215610dd657610dd5610d58565b5b6000610de484828501610dab565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4082610df7565b810181811067ffffffffffffffff82111715610e5f57610e5e610e08565b5b80604052505050565b6000610e72610d4e565b9050610e7e8282610e37565b919050565b600067ffffffffffffffff821115610e9e57610e9d610e08565b5b610ea782610df7565b9050602081019050919050565b82818337600083830152505050565b6000610ed6610ed184610e83565b610e68565b905082815260208101848484011115610ef257610ef1610df2565b5b610efd848285610eb4565b509392505050565b600082601f830112610f1a57610f19610ded565b5b8135610f2a848260208601610ec3565b91505092915050565b60048110610f4057600080fd5b50565b600081359050610f5281610f33565b92915050565b6000819050919050565b610f6b81610f58565b8114610f7657600080fd5b50565b600081359050610f8881610f62565b92915050565b600080600080600060a08688031215610faa57610fa9610d58565b5b600086013567ffffffffffffffff811115610fc857610fc7610d5d565b5b610fd488828901610f05565b955050602086013567ffffffffffffffff811115610ff557610ff4610d5d565b5b61100188828901610f05565b945050604061101288828901610f43565b935050606061102388828901610f79565b925050608061103488828901610dab565b9150509295509295909350565b61104a81610d82565b82525050565b60006020820190506110656000830184611041565b92915050565b60006020828403121561108157611080610d58565b5b600082013567ffffffffffffffff81111561109f5761109e610d5d565b5b6110ab84828501610f05565b91505092915050565b600481106110c157600080fd5b50565b6000813590506110d3816110b4565b92915050565b600080604083850312156110f0576110ef610d58565b5b600083013567ffffffffffffffff81111561110e5761110d610d5d565b5b61111a85828601610f05565b925050602061112b858286016110c4565b9150509250929050565b60008115159050919050565b61114a81611135565b811461115557600080fd5b50565b60008135905061116781611141565b92915050565b6000806040838503121561118457611183610d58565b5b600061119285828601610dab565b92505060206111a385828601611158565b9150509250929050565b600061ffff82169050919050565b6111c4816111ad565b81146111cf57600080fd5b50565b6000813590506111e1816111bb565b92915050565b600080604083850312156111fe576111fd610d58565b5b600061120c85828601610dab565b925050602061121d858286016111d2565b9150509250929050565b6000806000806080858703121561124157611240610d58565b5b600085013567ffffffffffffffff81111561125f5761125e610d5d565b5b61126b87828801610f05565b945050602085013567ffffffffffffffff81111561128c5761128b610d5d565b5b61129887828801610f05565b93505060406112a987828801610f79565b92505060606112ba87828801610dab565b91505092959194509250565b600082825260208201905092915050565b7f596f7520646f206e6f742068617665207065726d697373696f6e000000000000600082015250565b600061130d601a836112c6565b9150611318826112d7565b602082019050919050565b6000602082019050818103600083015261133c81611300565b9050919050565b7f596f75206d757374207570677261646520666972737400000000000000000000600082015250565b60006113796016836112c6565b915061138482611343565b602082019050919050565b600060208201905081810360008301526113a88161136c565b9050919050565b600081519050919050565b60005b838110156113d85780820151818401526020810190506113bd565b60008484015250505050565b60006113ef826113af565b6113f981856112c6565b93506114098185602086016113ba565b61141281610df7565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061145d5761145c61141d565b5b50565b600081905061146e8261144c565b919050565b600061147e82611460565b9050919050565b61148e81611473565b82525050565b61149d81610f58565b82525050565b600060a08201905081810360008301526114bd81886113e4565b905081810360208301526114d181876113e4565b90506114e06040830186611485565b6114ed6060830185611494565b6114fa6080830184611041565b9695505050505050565b6000602082019050818103600083015261151e81846113e4565b905092915050565b600481106115375761153661141d565b5b50565b600081905061154882611526565b919050565b60006115588261153a565b9050919050565b6115688161154d565b82525050565b6000604082019050818103600083015261158881856113e4565b9050611597602083018461155f565b9392505050565b6115a781611135565b82525050565b60006040820190506115c26000830185611041565b6115cf602083018461159e565b9392505050565b6115df816111ad565b82525050565b60006040820190506115fa6000830185611041565b61160760208301846115d6565b9392505050565b6000608082019050818103600083015261162881876113e4565b9050818103602083015261163c81866113e4565b905061164b6040830185611494565b6116586060830184611041565b9594505050505056fea264697066735822122058914c70d1584a1dd58ca2047a3a85fb62852f4065a60cd3c4f7c82eaa65b3a564736f6c634300081c0033";

type CondominiumAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CondominiumAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CondominiumAdapter__factory extends ContractFactory {
  constructor(...args: CondominiumAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CondominiumAdapter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CondominiumAdapter__factory {
    return super.connect(runner) as CondominiumAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CondominiumAdapterInterface {
    return new Interface(_abi) as CondominiumAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CondominiumAdapter {
    return new Contract(address, _abi, runner) as unknown as CondominiumAdapter;
  }
}
