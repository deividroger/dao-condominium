/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  CondominiumAdapter,
  CondominiumAdapterInterface,
} from "../CondominiumAdapter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "residenceId",
        type: "uint16",
      },
    ],
    name: "addResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "addTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "closeVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "openVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
    ],
    name: "removeResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "removeTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isEntering",
        type: "bool",
      },
    ],
    name: "setCounselor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "enum CondominiumLib.Options",
        name: "option",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052348015600f57600080fd5b506028679339b6d03b62586460c01b607860201b60201c565b604067f9d56db0e04b191c60c01b607860201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050607b565b50565b6080516110ea61009d60003960008181610238015261052901526110ea6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638fc5dad8116100715780638fc5dad81461013e57806390ca27f31461015a57806396fa1def146101765780639e1bf98514610192578063b1583546146101ae578063c1e6adfd146101ca576100a9565b80630900f010146100ae578063597de987146100ca5780637311ad81146100e65780637b57ee49146101045780638da5cb5b14610120575b600080fd5b6100c860048036038101906100c39190610a88565b6101e6565b005b6100e460048036038101906100df9190610a88565b61032f565b005b6100ee6103f9565b6040516100fb9190610ac4565b60405180910390f35b61011e60048036038101906101199190610c25565b61045d565b005b610128610527565b6040516101359190610ac4565b60405180910390f35b61015860048036038101906101539190610c25565b61054b565b005b610174600480360381019061016f9190610c93565b610615565b005b610190600480360381019061018b9190610d27565b6106e2565b005b6101ac60048036038101906101a79190610c25565b6107af565b005b6101c860048036038101906101c39190610da1565b610879565b005b6101e460048036038101906101df9190610de1565b610946565b005b6101fa67c60732e3b3c36c8b60c01b610a13565b61020e678921781f61e48daa60c01b610a13565b6102226731b78c0f7d1860ed60c01b610a13565b61023667076a25fb65f5d8a060c01b610a13565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bb90610eb6565b60405180910390fd5b6102d86722254d280e96fde360c01b610a13565b6102ec6724464629ed383d4d60c01b610a13565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61034367faa6198b277d89bc60c01b610a13565b6103576763019b1ecd57ed6e60c01b610a13565b61036b673254ea30f6383aa460c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663597de987826040518263ffffffff1660e01b81526004016103c49190610ac4565b600060405180830381600087803b1580156103de57600080fd5b505af11580156103f2573d6000803e3d6000fd5b5050505050565b600061040f67103487ad28ce6ffc60c01b610a13565b61042367614051de3863fa2f60c01b610a13565b61043767e9f6d34b80f331cf60c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61047167e74d2056e7a5762960c01b610a13565b61048567d99f09709d9a15b460c01b610a13565b610499672c8bd40863e9978060c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b57ee49826040518263ffffffff1660e01b81526004016104f29190610f44565b600060405180830381600087803b15801561050c57600080fd5b505af1158015610520573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61055f67a3211ede87b5a4ce60c01b610a13565b6105736728a97b97058816f860c01b610a13565b6105876769e12139f7aee4d760c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fc5dad8826040518263ffffffff1660e01b81526004016105e09190610f44565b600060405180830381600087803b1580156105fa57600080fd5b505af115801561060e573d6000803e3d6000fd5b5050505050565b6106296798cefe20afd1dc1360c01b610a13565b61063d6782b48e5f93b1eebf60c01b610a13565b61065167ed1df6ee39114e0960c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390ca27f383836040518363ffffffff1660e01b81526004016106ac929190610fdd565b600060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050505050565b6106f66705b900fc6d7deb2b60c01b610a13565b61070a67f4bce1b918312fce60c01b610a13565b61071e678ba48998927b82ca60c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396fa1def83836040518363ffffffff1660e01b815260040161077992919061101c565b600060405180830381600087803b15801561079357600080fd5b505af11580156107a7573d6000803e3d6000fd5b505050505050565b6107c367de628555d6b71fb260c01b610a13565b6107d767474badb0ff9d21a560c01b610a13565b6107eb67d7768f6662a5c2bc60c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e1bf985826040518263ffffffff1660e01b81526004016108449190610f44565b600060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b5050505050565b61088d678e2a29a8e8baa8a860c01b610a13565b6108a167c4874a4434c02fbf60c01b610a13565b6108b5671eed9429ec081d9260c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b158354683836040518363ffffffff1660e01b8152600401610910929190611054565b600060405180830381600087803b15801561092a57600080fd5b505af115801561093e573d6000803e3d6000fd5b505050505050565b61095a6798114dbee8c5afd160c01b610a13565b61096e67dbf367a3d33d8d6460c01b610a13565b61098267923b8e5b6bdafd2a60c01b610a13565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1e6adfd83836040518363ffffffff1660e01b81526004016109dd92919061107d565b600060405180830381600087803b1580156109f757600080fd5b505af1158015610a0b573d6000803e3d6000fd5b505050505050565b50565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5582610a2a565b9050919050565b610a6581610a4a565b8114610a7057600080fd5b50565b600081359050610a8281610a5c565b92915050565b600060208284031215610a9e57610a9d610a20565b5b6000610aac84828501610a73565b91505092915050565b610abe81610a4a565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b3282610ae9565b810181811067ffffffffffffffff82111715610b5157610b50610afa565b5b80604052505050565b6000610b64610a16565b9050610b708282610b29565b919050565b600067ffffffffffffffff821115610b9057610b8f610afa565b5b610b9982610ae9565b9050602081019050919050565b82818337600083830152505050565b6000610bc8610bc384610b75565b610b5a565b905082815260208101848484011115610be457610be3610ae4565b5b610bef848285610ba6565b509392505050565b600082601f830112610c0c57610c0b610adf565b5b8135610c1c848260208601610bb5565b91505092915050565b600060208284031215610c3b57610c3a610a20565b5b600082013567ffffffffffffffff811115610c5957610c58610a25565b5b610c6584828501610bf7565b91505092915050565b60048110610c7b57600080fd5b50565b600081359050610c8d81610c6e565b92915050565b60008060408385031215610caa57610ca9610a20565b5b600083013567ffffffffffffffff811115610cc857610cc7610a25565b5b610cd485828601610bf7565b9250506020610ce585828601610c7e565b9150509250929050565b60008115159050919050565b610d0481610cef565b8114610d0f57600080fd5b50565b600081359050610d2181610cfb565b92915050565b60008060408385031215610d3e57610d3d610a20565b5b6000610d4c85828601610a73565b9250506020610d5d85828601610d12565b9150509250929050565b600061ffff82169050919050565b610d7e81610d67565b8114610d8957600080fd5b50565b600081359050610d9b81610d75565b92915050565b60008060408385031215610db857610db7610a20565b5b6000610dc685828601610a73565b9250506020610dd785828601610d8c565b9150509250929050565b60008060408385031215610df857610df7610a20565b5b600083013567ffffffffffffffff811115610e1657610e15610a25565b5b610e2285828601610bf7565b925050602083013567ffffffffffffffff811115610e4357610e42610a25565b5b610e4f85828601610bf7565b9150509250929050565b600082825260208201905092915050565b7f596f7520646f206e6f742068617665207065726d697373696f6e000000000000600082015250565b6000610ea0601a83610e59565b9150610eab82610e6a565b602082019050919050565b60006020820190508181036000830152610ecf81610e93565b9050919050565b600081519050919050565b60005b83811015610eff578082015181840152602081019050610ee4565b60008484015250505050565b6000610f1682610ed6565b610f208185610e59565b9350610f30818560208601610ee1565b610f3981610ae9565b840191505092915050565b60006020820190508181036000830152610f5e8184610f0b565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610fa657610fa5610f66565b5b50565b6000819050610fb782610f95565b919050565b6000610fc782610fa9565b9050919050565b610fd781610fbc565b82525050565b60006040820190508181036000830152610ff78185610f0b565b90506110066020830184610fce565b9392505050565b61101681610cef565b82525050565b60006040820190506110316000830185610ab5565b61103e602083018461100d565b9392505050565b61104e81610d67565b82525050565b60006040820190506110696000830185610ab5565b6110766020830184611045565b9392505050565b600060408201905081810360008301526110978185610f0b565b905081810360208301526110ab8184610f0b565b9050939250505056fea26469706673582212208168fe29646b71a737cd2a54d5340cae028e16b765e1cb26ee89c07162eb0cb364736f6c634300081c0033";

type CondominiumAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CondominiumAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CondominiumAdapter__factory extends ContractFactory {
  constructor(...args: CondominiumAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CondominiumAdapter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CondominiumAdapter__factory {
    return super.connect(runner) as CondominiumAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CondominiumAdapterInterface {
    return new Interface(_abi) as CondominiumAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CondominiumAdapter {
    return new Contract(address, _abi, runner) as unknown as CondominiumAdapter;
  }
}
